// Generated by Dagger (https://dagger.dev).
package com.simtop.chart.presentation.chart;

import com.simtop.chart.domain.usecases.GetMarketPriceUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ChartViewModel_Factory implements Factory<ChartViewModel> {
  private final Provider<GetMarketPriceUseCase> getMarketPriceUseCaseProvider;

  public ChartViewModel_Factory(Provider<GetMarketPriceUseCase> getMarketPriceUseCaseProvider) {
    this.getMarketPriceUseCaseProvider = getMarketPriceUseCaseProvider;
  }

  @Override
  public ChartViewModel get() {
    return newInstance(getMarketPriceUseCaseProvider.get());
  }

  public static ChartViewModel_Factory create(
      Provider<GetMarketPriceUseCase> getMarketPriceUseCaseProvider) {
    return new ChartViewModel_Factory(getMarketPriceUseCaseProvider);
  }

  public static ChartViewModel newInstance(GetMarketPriceUseCase getMarketPriceUseCase) {
    return new ChartViewModel(getMarketPriceUseCase);
  }
}
